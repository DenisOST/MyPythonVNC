import socket, threading, struct, json, io
from PIL import Image
from pynput.keyboard import Listener as KeyListener
import pyautogui as pag
import keyboard  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à
import zlib

screen_width, screen_height = pag.size()

SERVER_IP = '192.168.206.128'
IMG_PORT = 5001
CTRL_PORT = 5002

ctrl_sock = socket.socket()
ctrl_sock.connect((SERVER_IP, CTRL_PORT))

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞–≤–∏—à
pressed_keys = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
def send_command(cmd):
    data = json.dumps(cmd).encode()
    length = len(data).to_bytes(4, 'big')  # 4 –±–∞–π—Ç–∞ –¥–ª—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    ctrl_sock.sendall(length + data)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É + –¥–∞–Ω–Ω—ã–µ

def handle_keyboard():
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
    def on_press(event):
        send_command({"type": "keypress", "key": event.name})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–π –∫–ª–∞–≤–∏—à
    def on_release(event):
        send_command({"type": "keyrelease", "key": event.name})

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    keyboard.on_press(on_press)
    keyboard.on_release(on_release)

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∞–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
    keyboard.wait()

# –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=handle_keyboard, daemon=True).start()

def receive_images():
    import cv2
    import numpy as np

    s = socket.socket()
    s.connect((SERVER_IP, IMG_PORT))

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    info_size = int.from_bytes(s.recv(4), 'big')
    info_data = s.recv(info_size)
    screen_info = json.loads(info_data.decode())
    remote_w = screen_info['width']
    remote_h = screen_info['height']

    window_name = "Remote Screen"
    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
    cv2.setWindowProperty(window_name, cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

    is_fullscreen = [True]

    # üñ±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –≤ –æ–∫–Ω–µ
    # –í—Å—Ç–∞–≤–∫–∞ –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏ receive_images

    last_click_time = [0]
    is_dragging = [False]

    def mouse_callback(event, x, y, flags, param):
        import time

        if event == cv2.EVENT_MOUSEMOVE:
            if is_dragging[0]:
                send_command({
                    "type": "move",
                    "x": x,
                    "y": y,
                    "drag": True
                })
            else:
                send_command({
                    "type": "move",
                    "x": x,
                    "y": y
                })

        elif event == cv2.EVENT_LBUTTONDOWN:
            now = time.time()
            if now - last_click_time[0] < 0.3:  # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
                send_command({"type": "dblclick", "x": x, "y": y})
            else:
                send_command({"type": "mousedown", "x": x, "y": y, "button": "left"})
                is_dragging[0] = True
            last_click_time[0] = now

        elif event == cv2.EVENT_LBUTTONUP:
            send_command({"type": "mouseup", "x": x, "y": y, "button": "left"})
            is_dragging[0] = False

        elif event == cv2.EVENT_RBUTTONDOWN:  # –ü–ö–ú –Ω–∞–∂–∞—Ç–∞
            send_command({"type": "mousedown", "x": x, "y": y, "button": "right"})

        elif event == cv2.EVENT_RBUTTONUP:  # –ü–ö–ú –æ—Ç–ø—É—â–µ–Ω–∞
            send_command({"type": "mouseup", "x": x, "y": y, "button": "right"})

        elif event == cv2.EVENT_MOUSEWHEEL:  # –°–∫—Ä–æ–ª–ª –º—ã—à–∏
            dy = flags >> 16  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
            send_command({"type": "scroll", "x": x, "y": y, "dy": dy})


    cv2.setMouseCallback(window_name, mouse_callback)

    while True:
        try:
            size_data = s.recv(4)
            if not size_data:
                continue
            size = int.from_bytes(size_data, 'big')
            buf = b""
            while len(buf) < size:
                packet = s.recv(size - len(buf))
                if not packet:
                    break
                buf += packet

            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            decompressed_data = zlib.decompress(buf)

            img = Image.open(io.BytesIO(decompressed_data))
            frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            cv2.imshow(window_name, frame)

            key = cv2.waitKey(1) & 0xFF
            if key == 27:  # Esc –¥–ª—è –≤—ã—Ö–æ–¥–∞
                break

        except Exception as e:
            print("Image receive error:", e)
            break

    s.close()
    cv2.destroyAllWindows()

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
threading.Thread(target=receive_images).start()
threading.Thread(target=handle_keyboard, daemon=True).start()