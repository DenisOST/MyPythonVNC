import socket, threading, struct, json, io
from PIL import Image
from pynput.keyboard import Listener as KeyListener
import pyautogui as pag
import keyboard  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à
import zlib
import time
import math

screen_width, screen_height = pag.size()

SERVER_IP = '192.168.206.128'
IMG_PORT = 5001
CTRL_PORT = 5002

ctrl_sock = socket.socket()
ctrl_sock.connect((SERVER_IP, CTRL_PORT))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
def send_command(cmd):
    data = json.dumps(cmd).encode()
    length = len(data).to_bytes(4, 'big')  # 4 –±–∞–π—Ç–∞ –¥–ª—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    ctrl_sock.sendall(length + data)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É + –¥–∞–Ω–Ω—ã–µ

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
key_timestamps = {}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –æ–¥–Ω–æ–π –∫–ª–∞–≤–∏—à–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
KEY_PRESS_INTERVAL = 0.1

def handle_keyboard():
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
    def on_press(event):
        current_time = time.time()
        last_time = key_timestamps.get(event.name, 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        if current_time - last_time > KEY_PRESS_INTERVAL:
            key_timestamps[event.name] = current_time
            send_command({"type": "keypress", "key": event.name})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–π –∫–ª–∞–≤–∏—à
    def on_release(event):
        send_command({"type": "keyrelease", "key": event.name})

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    keyboard.on_press(on_press)
    keyboard.on_release(on_release)

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∞–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
    keyboard.wait()

# –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=handle_keyboard, daemon=True).start()

def receive_images():
    import cv2
    import numpy as np

    s = socket.socket()
    s.connect((SERVER_IP, IMG_PORT))

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    info_size = int.from_bytes(s.recv(4), 'big')
    info_data = s.recv(info_size)
    screen_info = json.loads(info_data.decode())
    remote_w = screen_info['width']
    remote_h = screen_info['height']

    window_name = "Remote Screen"
    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
    cv2.setWindowProperty(window_name, cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

    is_fullscreen = [True]

    # üñ±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –≤ –æ–∫–Ω–µ
    last_click_time = [0]
    is_dragging = [False]

    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    mouse_state = {"last_position": [0, 0]}

    def mouse_callback(event, x, y, flags, param):

        MIN_MOVE_DISTANCE = 5
        last_position = param["last_position"]

        if event == cv2.EVENT_MOUSEMOVE:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –ª–∏ –º—ã—à—å –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            if math.hypot(x - last_position[0], y - last_position[1]) > MIN_MOVE_DISTANCE:
                if is_dragging[0]:  # –ï—Å–ª–∏ –õ–ö–ú –∑–∞–∂–∞—Ç–∞
                    send_command({
                        "type": "move",
                        "x": x,
                        "y": y,
                        "drag": True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
                    })
                else:
                    send_command({
                        "type": "move",
                        "x": x,
                        "y": y
                    })
                param["last_position"] = [x, y]

        elif event == cv2.EVENT_LBUTTONDOWN:
            now = time.time()
            if now - last_click_time[0] < 0.7:  # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
                send_command({"type": "dblclick", "x": x, "y": y})
                last_click_time[0] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ç—Ä–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
            else:
                send_command({"type": "mousedown", "x": x, "y": y, "button": "left"})
                is_dragging[0] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            last_click_time[0] = now

        elif event == cv2.EVENT_LBUTTONUP:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
            time.sleep(0.05)
            send_command({"type": "mouseup", "x": x, "y": y, "button": "left"})
            is_dragging[0] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è

        elif event == cv2.EVENT_RBUTTONDOWN:
            send_command({"type": "mousedown", "x": x, "y": y, "button": "right"})

        elif event == cv2.EVENT_RBUTTONUP:
            send_command({"type": "mouseup", "x": x, "y": y, "button": "right"})

        elif event == cv2.EVENT_MBUTTONDOWN:
            send_command({"type": "mousedown", "x": x, "y": y, "button": "middle"})

        elif event == cv2.EVENT_MBUTTONUP:
            send_command({"type": "mouseup", "x": x, "y": y, "button": "middle"})

        elif event == cv2.EVENT_MOUSEWHEEL:
            dy = flags >> 16
            send_command({"type": "scroll", "x": x, "y": y, "dy": dy})

    # –ü–µ—Ä–µ–¥–∞—ë–º mouse_state –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    cv2.setMouseCallback(window_name, mouse_callback, mouse_state)

    while True:
        try:
            size_data = s.recv(4)
            if not size_data:
                continue
            size = int.from_bytes(size_data, 'big')
            buf = b""
            while len(buf) < size:
                packet = s.recv(size - len(buf))
                if not packet:
                    break
                buf += packet

            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            decompressed_data = zlib.decompress(buf)

            img = Image.open(io.BytesIO(decompressed_data))
            frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            cv2.imshow(window_name, frame)

            key = cv2.waitKey(1) & 0xFF
            if key == 27:  # Esc –¥–ª—è –≤—ã—Ö–æ–¥–∞
                break

        except Exception as e:
            print("Image receive error:", e)
            break

    s.close()
    cv2.destroyAllWindows()

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
threading.Thread(target=receive_images).start()
threading.Thread(target=handle_keyboard, daemon=True).start()